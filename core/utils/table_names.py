from core.data.models.time_series import *

def generate_table_name(source: str, symbol: str, 
                        serie_type: str, duration: int) -> str:
    """
    Generates a safe table name from provided metadata.

    Parameters
    ----------
    source : str
        The data source (e.g., "binance").
    symbol : str
        The trading pair symbol (e.g., "BTC/USDT").
    serie_type : str
        The type of series (e.g., "kline", "funding_rate").
    duration : int
        The duration or timeframe (e.g., 60000 for 1 minute).

    Returns
    -------
    str
        A safe table name with '/' and ':' replaced for database compatibility.
    """
    safe_symbol = symbol.replace('/', '°').replace(":","°°")#.lower()
    return f"{source}_{safe_symbol}_{serie_type}_{duration}"#.lower()

def recover_metadata(table_name: str) -> tuple:
    """
    Recovers metadata (source, symbol, serie_type, duration) from a table name.

    Parameters
    ----------
    table_name : str
        The table name generated by `generate_table_name`.

    Returns
    -------
    tuple
        A tuple containing (source, symbol, serie_type, duration).

    Raises
    ------
    Exception
        If the provided table name does not match the expected format.
    """
    args = table_name.split( "_" )
    if len(args) != 4:
        # Raise an error if the table name format is incorrect
        raise ValueError("Invalid table name format. Expected 'source_symbol_serie_type_duration'.")
    args = [ arg.replace('°°',':').replace("°","/") for arg in args ]
    metadata = ( *[args[i] for i in range(3)], int(args[-1]) )
    return metadata